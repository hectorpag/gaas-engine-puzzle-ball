
// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace PaperToss.Data
{

    using PaperToss.Model;




    using System.Linq;



    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.20.1.0")]
    public partial class dbContext : System.Data.Entity.DbContext, IdbContext
    {

        public System.Data.Entity.DbSet<Config> Configs { get; set; } // Config


        public System.Data.Entity.DbSet<Consumer> Consumers { get; set; } // Consumer


        public System.Data.Entity.DbSet<Fuel> Fuels { get; set; } // Fuel


        public System.Data.Entity.DbSet<GameDataCapture> GameDataCaptures { get; set; } // GameDataCapture


        public System.Data.Entity.DbSet<GamePlay> GamePlays { get; set; } // GamePlay


        public System.Data.Entity.DbSet<GamePlayView> GamePlayViews { get; set; } // GamePlayView


        public System.Data.Entity.DbSet<Score> Scores { get; set; } // Scores


        public System.Data.Entity.DbSet<UniqueGamePlayView> UniqueGamePlayViews { get; set; } // UniqueGamePlayView



        static dbContext()
        {

            System.Data.Entity.Database.SetInitializer<dbContext>(null);

        }

        public dbContext()
            : base("Name=dbEntities")
        {
            InitializePartial();

        }

        public dbContext(string connectionString)
            : base(connectionString)
        {
            InitializePartial();

        }

        public dbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
            InitializePartial();

        }

        public dbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
            InitializePartial();

        }

        public dbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
            InitializePartial();

        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }


        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }


        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);



            modelBuilder.Configurations.Add(new ConfigConfiguration());

            modelBuilder.Configurations.Add(new ConsumerConfiguration());

            modelBuilder.Configurations.Add(new FuelConfiguration());

            modelBuilder.Configurations.Add(new GameDataCaptureConfiguration());

            modelBuilder.Configurations.Add(new GamePlayConfiguration());

            modelBuilder.Configurations.Add(new GamePlayViewConfiguration());

            modelBuilder.Configurations.Add(new ScoreConfiguration());

            modelBuilder.Configurations.Add(new UniqueGamePlayViewConfiguration());



            OnModelCreatingPartial(modelBuilder);

        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {

            modelBuilder.Configurations.Add(new ConfigConfiguration(schema));

            modelBuilder.Configurations.Add(new ConsumerConfiguration(schema));

            modelBuilder.Configurations.Add(new FuelConfiguration(schema));

            modelBuilder.Configurations.Add(new GameDataCaptureConfiguration(schema));

            modelBuilder.Configurations.Add(new GamePlayConfiguration(schema));

            modelBuilder.Configurations.Add(new GamePlayViewConfiguration(schema));

            modelBuilder.Configurations.Add(new ScoreConfiguration(schema));

            modelBuilder.Configurations.Add(new UniqueGamePlayViewConfiguration(schema));

            return modelBuilder;
        }


        partial void InitializePartial();
        partial void OnModelCreatingPartial(System.Data.Entity.DbModelBuilder modelBuilder);


        
        // Stored Procedures

        public System.Collections.Generic.List<GameDashboardReturnModel> GameDashboard(int? consumerId, string campaignKey, System.DateTime? startDate)
        {
            int procResult;
            return GameDashboard(consumerId, campaignKey, startDate, out procResult);
        }

        public System.Collections.Generic.List<GameDashboardReturnModel> GameDashboard(int? consumerId, string campaignKey, System.DateTime? startDate, out int procResult)

        {
            var consumerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@consumerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = consumerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!consumerId.HasValue)
                consumerIdParam.Value = System.DBNull.Value;

            var campaignKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@campaignKey", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = campaignKey, Size = 128 };
            if (campaignKeyParam.Value == null)
                campaignKeyParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            var procResultData = Database.SqlQuery<GameDashboardReturnModel>("EXEC @procResult = [dbo].[GameDashboard] @consumerID, @campaignKey, @StartDate", consumerIdParam, campaignKeyParam, startDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;

            return procResultData;
        }


        public async System.Threading.Tasks.Task<System.Collections.Generic.List<GameDashboardReturnModel>> GameDashboardAsync(int? consumerId, string campaignKey, System.DateTime? startDate)
        {
            var consumerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@consumerID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = consumerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!consumerId.HasValue)
                consumerIdParam.Value = System.DBNull.Value;

            var campaignKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@campaignKey", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = campaignKey, Size = 128 };
            if (campaignKeyParam.Value == null)
                campaignKeyParam.Value = System.DBNull.Value;

            var startDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = startDate.GetValueOrDefault() };
            if (!startDate.HasValue)
                startDateParam.Value = System.DBNull.Value;


            var procResultData = await Database.SqlQuery<GameDashboardReturnModel>("EXEC [dbo].[GameDashboard] @consumerID, @campaignKey, @StartDate", consumerIdParam, campaignKeyParam, startDateParam).ToListAsync();


            return procResultData;
        }

    }



}
// </auto-generated>
